# [QA Workflow Toolbox]-[AC.7]: The template of QA workflow service can be 
#                               delivered with some modifciation without exposing
#                               too much CI detail from pipeline repository
name: QA Workflow Services

on:
  # [QA Workflow Toolbox]-[AC.3]: Manual Trigger Support
  workflow_dispatch:
    inputs:
      # Choose the functionality to run fast-feedback CI
      service:
        description: Service that need to 
        required: true
        type: string
  # Any feature branch PR to QA or direct push to QA will trigger this workflow
  # [QA Workflow Toolbox]-[AC.2]: Automatic Trigger on QA Branch
  pull_request:
    types:
      - opened       # Trigger PR is first opened
      - reopened     # Trigger PR is reopened 
      - synchronize  # New push where the branch has PR
    branches:
      - qa           # Target branch (base) must be QA
      - 'qa/**'
  # [QA Workflow Toolbox]-[AC.1]: Automatic Trigger on QA Branch
  push:
    branches:
      - 'qa'
      - 'qa/**'

run-name: "[QA]_[${{ github.event_name }}]: ${{ github.event.head_commit.message || github.event.pull_request.title  }}. at ${{ github.ref_name }} (${{ github.sha }})"

jobs:
  set-configuration:
    name: Setup configuration based on the trigger event
    runs-on: ubuntu-latest
    outputs:
      service: ${{ steps.extract.outputs.service }}
      environment: ${{ steps.determine.outputs.environment }}
      has_open_pr_to_qa: ${{ steps.check_pr.outputs.has_open_pr_to_qa }}
    steps:
      - id: determine
        name: Set environment to QA
        run: |
          echo "environment=QA" >> $GITHUB_OUTPUT
          echo "The matching deployment's environment is QA"

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh
      
      - uses: actions/checkout@v4

      # [QA Workflow Toolbox]-[AC.4]: Branch Parameterization for Manual Runs
      - name: Check if branch has open PR to QA
        id: check_pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          branch="${{ github.ref_name }}"
          pr_count=$(gh pr list --base qa --head "$branch" --state open --json number --jq 'length')
          if [ "$pr_count" -gt 0 ]; then
            echo "has_open_pr_to_qa=true" >> $GITHUB_OUTPUT
          else
            echo "has_open_pr_to_qa=false" >> $GITHUB_OUTPUT
          fi

      # The git commit message following the git commit conventional
      # In this case only four commit header type will trigger the test: 
      #   - feat(<functionality>)
      #   - test(<functionality>)
      #   - refactor(<functionality>)
      #   - perf(<functionality>)
      - name: Extract functionality test scope based on git commit message
        id: extract
        run: |
          #!/bin/bash

          if [ -z "${{ github.event.inputs.service || '' }}" ]; then
            COMMIT_MSG="${{ github.event.head_commit.message || github.event.pull_request.title }}"
          else
            COMMIT_MSG="test(${{ github.event.inputs.service }}): Manual triggered for CI feedback"
          fi 
          echo "Commit message: $COMMIT_MSG"

          # Default if nothing matched
          SERVICE="ALL"
          
          # Check for feat(<service>/<FUNCTIONALITY>) or feat(<service>)
          if [[ "$COMMIT_MSG" =~ feat\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
          # Check for test(<service>/<FUNCTIONALITY>) or test(<service>)
          elif [[ "$COMMIT_MSG" =~ test\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
          # Check for refactor(<service>/<FUNCTIONALITY>) or refactor(<service>)
          elif [[ "$COMMIT_MSG" =~ refactor\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
          # Check for perf(<service>/<FUNCTIONALITY>) or perf(<service>)
          elif [[ "$COMMIT_MSG" =~ perf\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
          fi

          # Default values if nothing matched
          if [ -z "$SERVICE" ]; then
            SERVICE="ALL"
          fi
          echo "service=$SERVICE" >> $GITHUB_OUTPUT

  # [QA Workflow Toolbox]-[AC.3][AC.4]: Manual trigger fails if branch does not have PR to QA
  manual-trigger-branch-doest-not-have-pr-to-qa:
    name: Manual trigger on branch that does not have PR to QA
    runs-on: ubuntu-latest
    needs: set-configuration
    if: ${{ github.event_name== 'workflow_dispatch' && needs.set-configuration.outputs.has_open_pr_to_qa == 'false' && github.ref_name != 'qa' && !startsWith(github.ref_name, 'qa/') }} 
    steps:
      - name: Fail the workflow
        run: |
          echo "The branch '${{ github.ref_name }}' does not have an open PR to QA."
          echo "Please create a PR to QA before triggering this workflow manually."
          exit 1

  # [QA Workflow Toolbox]-[AC.5][AC.6]: Consistent QA Checks & Execution Feedback
  # [QA Workflow Toolbox]-[AC.2][AC.3]: Run for PRs to QA or manual trigger with PR to QA
  call-pr-ci-workflow:
    name: Pull Request CI Workflow
    needs: set-configuration
    # [QA Workflow Toolbox]-[AC.2][AC.3]: Run for PRs to QA or manual trigger with PR to QA
    # Only run this job if it's a PR event or if the specified branch has an open PR to QA when triggered manually
    if: ${{ github.event_name== 'pull_request' || (github.event_name== 'workflow_dispatch' && needs.set-configuration.outputs.has_open_pr_to_qa == 'true') }} 
    uses: <DUMMY_CI_WORKFLOW_PATH>/QA_pull-request-quality-gate.yml@<DUMMY_RELEASE_TAG>
    with:
      # Mandatory inputs
      environment: ${{ needs.set-configuration.outputs.environment }}
      service-name: ${{ needs.set-configuration.outputs.service }}

      # Custom
      custom-test-script:   
        ./.github/workflows/script/services-functionaliy-test.sh -s ${{ needs.set-configuration.outputs.service }} -t unit
      custom-build-script:  
        ./.github/workflows/script/services-functionaliy-test.sh -s ${{ needs.set-configuration.outputs.service }} -t int
    secrets:
      deploy_token: ${{ secrets.DEPLOY_TOKEN }}

  call-merged-commit-ci-workflow:
    name: Quality Monitoring CI workflow
    needs: set-configuration
    # [QA Workflow Toolbox]-[AC.5]: Either automatic push or manual trigger even on QA branch, should run the same workflows
    if: ${{(github.event_name == 'push')  || (github.event_name == 'workflow_dispatch' && github.ref_name == 'qa' && startsWith(github.ref_name, 'qa/')) }} 
    # [QA Workflow Toolbox]-[AC.6]: The detail report on pass/fail status and logs shall be provided be the workflow
    uses: <DUMMY_CI_WORKFLOW_PATH>/QA_merged-commit-quality-gate.yml@<DUMMY_RELEASE_TAG>
    with:
      # Mandatory inputs
      environment: ${{ needs.set-configuration.outputs.environment }}
      service-name: ${{ needs.set-configuration.outputs.service }}

      # Custom
      custom-test-script:   
        ./.github/workflows/script/services-functionaliy-test.sh -s ${{ needs.set-configuration.outputs.service }} -t unit
      custom-build-script:  
        ./.github/workflows/script/services-functionaliy-test.sh -s ${{ needs.set-configuration.outputs.service }} -t int
    secrets:
      deploy_token: ${{ secrets.DEPLOY_TOKEN }}    