name: Developer Workflow Services

on:
  workflow_dispatch:
    inputs:
      # ============ INPUT CONFIGURATION ============
      # Choose brach or commit to run fast-feedback CI
      commit-identifier:
        description: "The commit SHA (default: latest commit of the current branch)"
        required: false
        default: HEAD
        type: string
      # Choose the service to run fast-feedback CI
      functionality:
        description: Functionality of the service to run fast-feedback CI
        required: true
        type: string
      # ============ ADDITIONAL STAGE ============
      security-stage-enable :
          description: Enable security and compliance check stage (true/false)
          type: boolean
          required: false
          default: false
  push:
    # Any branch except main, prod, stag, qa will trigger this workflow
    branches-ignore:
      - 'main'
      - 'prod'
      - 'stag'
      - 'qa'
      - 'qa/**'

# [Fast Feedback at Commit Stage]-[AC.]: Branch that has pull request to merge to QA branch shall be ignore
run-name: "[DEV]: ${{ github.event.head_commit.message }} at ${{ github.ref_name }} triggered by ${{ github.event_name }}"

jobs:
  set-configuration:
    name: Setup configuration based on the trigger event
    runs-on: ubuntu-latest
    outputs:
      security-stage-enable: ${{ steps.security-stage-check.outputs.security-stage-enable }}
      service: ${{ steps.extract.outputs.service }}
      functionality_test_scope: ${{ steps.extract.outputs.functionality_test_scope }}
      has_open_pr_to_qa: ${{ steps.check_pr.outputs.has_open_pr_to_qa }}
    steps:
      - id: security-stage-check
        name: Check if security and compliance check stage is enabled
        run: |
          INPUT="${{ github.event.inputs.security-stage-enable || '' }}"
          if [ -z "$INPUT" ]; then
            echo "security-stage-enable=false" >> "$GITHUB_OUTPUT"
          else
            echo "security-stage-enable=$INPUT" >> "$GITHUB_OUTPUT"
          fi
          echo "Security and compliance check stage enable: $INPUT"

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh
      
      - uses: actions/checkout@v4

      # The git commit message following the git commit conventional
      # In this case only four commit header type will trigger the test: 
      #   - feat(<functionality>)
      #   - test(<functionality>)
      #   - refactor(<functionality>)
      #   - perf(<functionality>)
      - name: Extract functionality test scope based on git commit message
        id: extract
        run: |
          #!/bin/bash

          if [ -z "${{ github.event.inputs.functionality || '' }}"]; then
            COMMIT_MSG="${{ github.event.head_commit.message }}"
          else
            COMMIT_MSG="test(${{ github.event.inputs.functionality }}): Manual triggered for CI feedback"
          fi 
          echo "Commit message: $COMMIT_MSG"

          # Default if nothing matched
          FUNCTIONALITY="**"
          SERVICE="ALL"
          
          # Check for feat(<service>/<FUNCTIONALITY>) or feat(<service>)
          if [[ "$COMMIT_MSG" =~ feat\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
            FUNCTIONALITY="${BASH_REMATCH[3]}"
          # Check for test(<service>/<FUNCTIONALITY>) or test(<service>)
          elif [[ "$COMMIT_MSG" =~ test\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
            FUNCTIONALITY="${BASH_REMATCH[3]}"
          # Check for refactor(<service>/<FUNCTIONALITY>) or refactor(<service>)
          elif [[ "$COMMIT_MSG" =~ refactor\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
            FUNCTIONALITY="${BASH_REMATCH[3]}"
          # Check for perf(<service>/<FUNCTIONALITY>) or perf(<service>)
          elif [[ "$COMMIT_MSG" =~ perf\(([a-zA-Z0-9_-]+)(/([a-zA-Z0-9_/-]+))?\) ]]; then
            SERVICE="${BASH_REMATCH[1]}"
            FUNCTIONALITY="${BASH_REMATCH[3]}"
          fi

          # Default values if nothing matched
          if [ -z "$SERVICE" ]; then
            SERVICE="ALL"
          fi
          if [ -z "$FUNCTIONALITY" ]; then
            FUNCTIONALITY="**"
          fi

          echo "service=$SERVICE" >> $GITHUB_OUTPUT
          echo "functionality_test_scope=$FUNCTIONALITY" >> $GITHUB_OUTPUT

      # [QA Workflow Toolbox]-[AC.4]: Branch Parameterization for Manual Runs
      - name: Check if branch has open PR to QA
        id: check_pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          branch="${{ github.ref_name }}"
          pr_count=$(gh pr list --base qa --head "$branch" --state open --json number --jq 'length')
          if [ "$pr_count" -gt 0 ]; then
            echo "has_open_pr_to_qa=true" >> $GITHUB_OUTPUT
          else
            echo "has_open_pr_to_qa=false" >> $GITHUB_OUTPUT
          fi  

  # This job will run if it's a PR event or if the specified branch has an open PR to QA when triggered manually
  call-fast-feedback-ci-workflow:
    needs: set-configuration
    name: Fast-feedback at Commit Stage
    # [Fast Feedback at Commit Stage]-[AC.7]: Branch that has pull request to merge to QA branch shall be ignore
    if: ${{ needs.set-configuration.outputs.has_open_pr_to_qa == 'false' }}
    # Only run this job if it's a PR event or if the specified branch has an open PR to QA when triggered manually
    uses: <DUMMY_CI_WORKFLOW_PATH>/DEV_commit-fast-feedback.yml@<DUMMY_RELEASE_TAG>
    with:
      # Mandatory inputs
      service-name: ${{ needs.set-configuration.outputs.service }}

      # Custom
      custom-test-script: ./services-functionaliy-test.sh -t unit
      custom-build-script: services-functionaliy-test.sh -t int -s '${{ needs.set-configuration.outputs.functionality_test_scope }}'

      # Security and compliance check stage
      # Use fromJSON to convert string "true"/"false" to boolean true/false
      security-and-compliance-check-enable: ${{ fromJSON(needs.set-configuration.outputs.security-stage-enable) }}
    secrets:
      deploy_token: ${{ secrets.DEPLOY_TOKEN }}

  # [Fast Feedback at Commit Stage]-[AC.7]: Branch that has pull request to merge to QA branch shall be ignore
  skip-ci-condition:
    needs: set-configuration
    name: Fast feedback CI skips
    runs-on: ubuntu-latest
    if: ${{ needs.set-configuration.outputs.has_open_pr_to_qa == 'true' }}
    steps:
      - name: CI skip due to having PR merged to QA
        run: echo "CI skip"